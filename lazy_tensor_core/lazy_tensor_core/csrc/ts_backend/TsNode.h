#pragma once

#include "lazy_tensor_core/csrc/ir.h"
#include "lazy_tensors/computation_client/cache.h"

namespace torch_lazy_tensors {
namespace ir {
using AtenShape = std::vector<int64_t>;
using ShapeCache =
    lazy_tensors::util::Cache<lazy_tensors::hash_t, lazy_tensors::Shape,
                              lazy_tensors::util::HashReducer>;
class TsNode;
using TsNodePtr = std::shared_ptr<TsNode>;

template <typename T, typename... Args>
TsNodePtr MakeTsNode(Args&&... args) {
  return std::make_shared<T>(std::forward<Args>(args)...);
}

class TsNode : public Node {
 public:
  // Creates a new node with the given op name. The op is a unique identifier
  // for the operation. The num_outputs tells how many outputs a given operation
  // generates.
  TsNode(OpKind op, OpList operands, AtenShape aten_shape,
         c10::ScalarType aten_type, size_t num_outputs = 1,
         lazy_tensors::hash_t hash_seed = 0x5a2d296e9);

  // Same as the constructor above, but the shape is generated by a function,
  // only if needed (shape cache miss).
  TsNode(OpKind op, OpList operands,
         const std::function<lazy_tensors::Shape()>& shape_fn,
         size_t num_outputs = 1, lazy_tensors::hash_t hash_seed = 0x5a2d296e9);

  // The shape is set later.
  TsNode(OpKind op, OpList operands, size_t num_outputs = 1,
         lazy_tensors::hash_t hash_seed = 0x5a2d296e9);

  // For handwritten ops that supply lazy_tensors::Shape, provide a BC path
  TsNode(OpKind op, OpList operands, lazy_tensors::Shape shape,
         size_t num_outputs = 1, lazy_tensors::hash_t hash_seed = 0x5a2d296e9);

  void SetShapeDeferred(const std::function<lazy_tensors::Shape()>& shape_fn);

  // Contructor used to create leaf nodes.
  // For handwritten ops that supply lazy_tensors::Shape, provide a BC path
  TsNode(OpKind op, lazy_tensors::Shape shape, size_t num_outputs,
     lazy_tensors::hash_t hash_seed);

  virtual ~TsNode();

  // Retrieves the full shape of the IR Node. Note that if this is a
  // multi-output node, the returned shape will be a tuple.
  const lazy_tensors::Shape& shape() const;

  // Retrieves the shape of the output at a given index. If the node is not a
  // multi-output node, output_index must be zero.
  const lazy_tensors::Shape& shape(size_t output_index) const;

  lazy_tensors::Shape GetOpShape(
      const std::function<lazy_tensors::Shape()>& shape_fn) const;
};

}  // namespace ir
}  // namespace torch_lazy_tensors