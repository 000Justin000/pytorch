load("//tools/build_defs:glob_defs.bzl", "subdir_glob")
load("//tools/build_defs:remote_glog_library.bzl", "remote_glog_library")

load("//third_party:XNNPACK.BUCK.bzl", "define_xnnpack_targets")
load(
    "//third_party:buck_defs.bzl",
    "HOT_SRCS",
    "JIT_SRCS",
    "LOGGING_SRCS",
    "OPERATOR_SRCS",
    "SUBGRAPH_SRCS",
    "TABLE_SRCS",
)

# XNNPACK
define_xnnpack_targets()

cxx_library(
    name = "fmt",
    srcs = ['fmt/src/format.cc'],
    deps = [],
    compiler_flags = ['-w', '-Wno-error=format-zero-length', '-Wno-error=vla', '-Wno-incompatible-pointer-types-discards-qualifiers', '-Wno-unused-label', '-Wno-deprecated-declarations', '-Wno-implicit-function-declaration', '-Wno-error', '-Wno-non-pod-varargs', '-Wno-format-security', '-Wno-c++11-narrowing', '-Wno-ignored-attributes', '-Wno-return-std-move', '-Wno-shadow', '-Wno-sign-compare', '-Wno-switch', '-Wno-undef', '-Wno-uninitialized', '-Wno-unknown-pragmas', '-Wno-unknown-warning-option', '-Wno-unused-function', '-Wno-unused-local-typedef', '-Wno-unused-value', '-Wno-unused-variable', '-Wno-register', '-Wno-format', '-Wno-unused-lambda-capture', '-Wno-missing-braces', '-Wno-unused-parameter', '-Wno-unreachable-code', '-Wno-inconsistent-missing-destructor-override', '-Wno-implicit-fallthrough', '-Wno-ignored-qualifiers', '-Wno-pedantic', '-Wno-deprecated-copy', '-Wno-non-virtual-dtor', '-Wno-null-pointer-arithmetic', '-Wno-implicit-const-int-float-conversion', '-Wno-tautological-unsigned-enum-zero-compare', '-Wno-embedded-directive', '-Wno-int-conversion', '-Wno-nonnull', '-Wno-variadic-macros', '-Wno-zero-length-array', '-Wno-missing-prototypes', '-fno-exceptions', '-fno-rtti', '-Wno-braced-scalar-init', '-fvisibility-inlines-hidden'],
    preferred_linkage = "static",
    exported_preprocessor_flags = ['-DFMT_EXCEPTIONS=0'],
    header_namespace = "third_party/fmt",
    reexport_all_header_dependencies = True,
    public_system_include_directories = ['fmt/include'],
    raw_headers = glob(["fmt/include/fmt/*.h"]),
    soname = "libthird-party_fmt_fmt.$(ext)",
    visibility = ['PUBLIC'],
)

cxx_library(
    name = "pthreadpool",
    srcs = ['pthreadpool/src/legacy-api.c', 'pthreadpool/src/memory.c', 'pthreadpool/src/portable-api.c', 'pthreadpool/src/pthreads.c'],
    deps = [
        "//third_party:FXdiv",
        ":pthreadpool_header",
    ],
    compiler_flags = [
        "-w",
        "-Os",
        "-fstack-protector-strong",
        "-fno-delete-null-pointer-checks"
    ],
    headers = {
        'threadpool-atomics.h': 'pthreadpool/src/threadpool-atomics.h',
        'threadpool-common.h': 'pthreadpool/src/threadpool-common.h',
        'threadpool-object.h': 'pthreadpool/src/threadpool-object.h',
        'threadpool-utils.h': 'pthreadpool/src/threadpool-utils.h'
    },
    preferred_linkage = "static",
    exported_preprocessor_flags = [],
    frameworks = [],
    link_whole = False,
    linker_flags = [],
    platform_compiler_flags = [],
    platform_linker_flags = [],
    platform_preprocessor_flags = [['windows', ['-D_WINDOWS', '-D_WIN32', '-DWIN32', '-DNOMINMAX', '-D_CRT_SECURE_NO_WARNINGS', '-D_USE_MATH_DEFINES']], ['windows.*64$', ['-D_WIN64']]],
    preprocessor_flags = ['-DPTHREADPOOL_USE_FUTEX=0', '-DPTHREADPOOL_USE_GCD=0'],
    reexport_all_header_dependencies = True,
    visibility = ['PUBLIC'],
)

cxx_library(
    name = "pthreadpool_header",
    header_namespace = "",
    preferred_linkage = "static",
    link_whole = False,
    reexport_all_header_dependencies = True,
    exported_headers = {
        "pthreadpool.h": "pthreadpool/include/pthreadpool.h",
    },
)

cxx_library(
    name = "FXdiv",
    header_namespace = "",
    exported_headers = {
        "fxdiv.h": "FXdiv/include/fxdiv.h",
    },
    preferred_linkage = "static",
    reexport_all_header_dependencies = True,
    visibility = ["PUBLIC"],
)

cxx_library(
    name = "psimd",
    header_namespace = "",
    exported_headers = {
        "psimd.h": "psimd/include/psimd.h",
    },
    preferred_linkage = "static",
    reexport_all_header_dependencies = True,
    visibility = ["PUBLIC"],
)

cxx_library(
    name = "cpuinfo",
    srcs = glob(
        [
            "src/*.c",
            "src/linux/*.c",
            "src/x86/*.c",
            "src/x86/cache/*.c",
            "src/x86/linux/*.c",
        ],
        exclude = [
            "src/x86/mockcpuid.c",
            "src/linux/mockfile.c",
        ],
    ),
    raw_headers = glob([
        "cpuinfo/include/*.h",
        "cpuinfo/src/*.h",
        "cpuinfo/src/cpuinfo/*.h",
        "cpuinfo/src/include/*.h",
        "cpuinfo/src/x86/*.h",
        "cpuinfo/src/x86/linux/*.h",
        "cpuinfo/src/linux/*.h",
    ]),
    preferred_linkage = "static",
    include_directories = ["cpuinfo/src"],
    preprocessor_flags = [
        "-DCPUINFO_LOG_LEVEL=2",
        "-D_GNU_SOURCE=1",
    ],
    public_include_directories = ["cpuinfo/include", "cpuinfo/src"],
    visibility = ["PUBLIC"],
    deps = [
        ":clog",
    ],
)

cxx_library(
    name = "clog",
    srcs = [
        "cpuinfo/deps/clog/src/clog.c",
    ],
    raw_headers = glob([
        "cpuinfo/deps/clog/include/*.h",
    ]),
    public_include_directories = [
        "cpuinfo/deps/clog/include/",
    ],
    force_static = True,
    visibility = ["PUBLIC"],
)

cxx_library(
    name = "FP16",
    raw_headers = glob([
        "FP16/include/*.h",
    ]),
    public_include_directories = [
        "FP16/include/",
    ],
    force_static = True,
    visibility = ["PUBLIC"],
)

remote_glog_library(
    name = "glog",
    srcs = [
        'src/demangle.cc',
        'src/vlog_is_on.cc',
        'src/symbolize.cc',
        'src/raw_logging.cc',
        'src/logging.cc',
        'src/signalhandler.cc',
        'src/utilities.cc'
    ],
    compiler_flags = [
        '-Wno-sign-compare',
        '-Wno-unused-function',
        '-Wno-unused-local-typedefs',
        '-Wno-unused-variable',
        '-Wno-deprecated-declarations',
    ],
    preferred_linkage = "static",
    exported_linker_flags = [],
    exported_preprocessor_flags = [
        '-DGLOG_NO_ABBREVIATED_SEVERITIES',
        '-DGLOG_STL_LOGGING_FOR_UNORDERED',
        '-DGOOGLE_GLOG_DLL_DECL=',
        '-DGOOGLE_NAMESPACE=google',
        # this is required for buck build
        '-DGLOG_BAZEL_BUILD',
        '-DHAVE_PTHREAD',
        # Allows src/logging.cc to determine the host name.
        '-DHAVE_SYS_UTSNAME_H',
        # For src/utilities.cc.
        '-DHAVE_SYS_SYSCALL_H',
        '-DHAVE_SYS_TIME_H',
        '-DHAVE_STDINT_H',
        '-DHAVE_STRING_H',
        # Enable dumping stacktrace upon sigaction.
        '-DHAVE_SIGACTION',
        # For logging.cc.
        '-DHAVE_PREAD',
        '-DHAVE___ATTRIBUTE__',
    ],
    soname = "libglog.$(ext)",
    visibility = ["PUBLIC"],
    http_archive = "glog_http_archive",
)

http_archive(
    name = "glog_http_archive",
    strip_prefix = "glog-0.4.0",
    sha256 = "f28359aeba12f30d73d9e4711ef356dc842886968112162bc73002645139c39c",
    urls = [
        "https://github.com/google/glog/archive/v0.4.0.tar.gz",
    ],
    out = "",
)
