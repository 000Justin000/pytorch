from typing import Optional, List, Any, Generic, TypeVar, OrderedDict, Iterator, Iterable
import io

T = TypeVar('T')

class OrderedSet(Generic[T]):
  def __init__(self, iterable: Optional[Iterable[T]]=None) -> None: ...
  def add(self, value: T) -> None: ...
  def intersection_update(self, other: OrderedSet[T]) -> None: ...
  def update(self, other: OrderedSet[T]) -> None: ...
  def difference(self, other: OrderedSet[T]) -> None: ...
  def __iter__(self) -> Iterator[T]: ...
  def __contains__(self, value: T) -> bool: ...
  def __len__(self) -> int: ...


class IWYUOutputRecord:
    filename: str
    includes_and_forward_declares_to_add: OrderedSet[str]
    full_include_lines: OrderedDict[str, str]

    def Merge(self, other: IWYUOutputRecord) -> None: ...
    def HasContentfulChanges(self) -> bool: ...

class IWYUOutputParser:
    def ParseOneRecord(self, iwyu_output: "io.StringIO", flags: Any) -> Optional[IWYUOutputRecord]: ...

class FileInfo:
    encoding: str

    @staticmethod
    def parse(filename: str) -> "FileInfo": ...

class LineInfo:
    line: str


class FixIncludesError(Exception):
    pass

def ParseOneFile(f: List[str], iwyu_record: IWYUOutputRecord) -> List[LineInfo]: ...
def NormalizeFilePath(basedir: Optional[str], filename: str) -> str: ...
def FixFileLines(iwyu_record: IWYUOutputRecord, file_lines: List[LineInfo], flags: Any, fileinfo: FileInfo) -> List[str]: ...
