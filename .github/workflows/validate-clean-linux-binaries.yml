name: Validate Clean binary  images

on:
  push:
    branches:
      main
    paths:
      - .github/workflows/validate-clean-linux-binaries.yml
  pull_request:
    paths:
      - .github/workflows/validate-clean-linux-binaries.yml

env:
  DOCKER_REGISTRY: "docker.io"
  DOCKER_BUILDKIT: 1
  DOCKER_ID: ${{ secrets.DOCKER_ID }}
  DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
  WITH_PUSH: ${{ github.event_name == 'push' }}

jobs:
  validate-clean-linux-binaries:
    runs-on: ubuntu-20.04-m60
    timeout-minutes: 60
    strategy:
      matrix:
        package_install: ["libtorch"]
        cuda_version: ["11.7"]
        python_version: ["3.7", "3.8", "3.9", "3.10"]
    env:
      GPU_ARCH_TYPE: cuda
      GPU_ARCH_VERSION: ${{ matrix.cuda_version }}
      PYTHON_VERSION: ${{ matrix.python_version }}
    steps:
      - name: Checkout PyTorch builder
        uses: actions/checkout@v2
      - name: Install conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python_version }}
          auto-update-conda: true
          miniconda-version: "latest"
          activate-environment: testenv
      - name: Check nvidia smi
        run: |
          nvidia-smi
      - name: Install pytorch and smoke test
        env:
          ENV_NAME: env-${{ matrix.package_install }}-${{ github.run_id }}
          CUDA_VER: ${{ matrix.cuda_version }}
          PACKAGE_VER: ${{matrix.package_install}}
        run: |
          set -ex
          
          # install conda with cuda
          if [ ${PACKAGE_VER} == 'conda' ] && [ ${CUDA_VER} != "cpu" ] && [ ${CUDA_VER} != "rocm" ]; then
            conda create -yp ${ENV_NAME} python=${PYTHON_VERSION} numpy
            conda install -p ${ENV_NAME} pytorch torchvision torchaudio cudatoolkit=${CUDA_VER} -c pytorch -c conda-forge
            conda run --cwd /tmp -p ${ENV_NAME} python3 -c "import torch;y=torch.randn([3,5]).cuda();print(y);print(torch.backends.cudnn.version())"
            conda env remove -p ${ENV_NAME}
            
          # install conda cpu only
          elif [ ${PACKAGE_VER} == 'conda' ] && [ ${CUDA_VER} == "skip" ]; then
            conda create -yp ${ENV_NAME} python=${PYTHON_VERSION} numpy
            conda install pytorch torchvision torchaudio cpuonly -c pytorch
            conda run --cwd /tmp -p ${ENV_NAME} python3 -c "import torch;y=torch.randn([3,5]);print(y);"
            conda env remove -p ${ENV_NAME}
          fi
                    
          # install pip
          if [ ${PACKAGE_VER} == 'pip' ]; then
            case $CUDA_VER in
              ("rocm") { pip3 install torch torchvision torchaudio --extra-index-url "https://download.pytorch.org/whl/rocm5.1.1";
                      python3 -c "import torch;y=torch.randn([3,5]);print(y);"; }
                      ;;
              ("cpu") { pip3 install torch torchvision torchaudio --extra-index-url "https://download.pytorch.org/whl/cpu";
                     python3 -c "import torch;y=torch.randn([3,5]);print(y);"; }
                     ;;
              ("10.2") { pip3 install torch torchvision torchaudio;
                       python3 -c "import torch;y=torch.randn([3,5]).cuda();print(y);print(torch.backends.cudnn.version())"; }
                       ;;
              ("11.3") { pip3 install torch torchvision torchaudio --extra-index-url "https://download.pytorch.org/whl/cu113";
                       python3 -c "import torch;y=torch.randn([3,5]).cuda();print(y);print(torch.backends.cudnn.version())"; }
                       ;;
              ("11.6") { pip3 install torch torchvision torchaudio --extra-index-url "https://download.pytorch.org/whl/cu116";
                       python3 -c "import torch;y=torch.randn([3,5]).cuda();print(y);print(torch.backends.cudnn.version())"; }
                       ;;
              ("11.7") { pip3 install torch torchvision torchaudio --extra-index-url "https://download.pytorch.org/whl/cu117";
                       python3 -c "import torch;y=torch.randn([3,5]).cuda();print(y);print(torch.backends.cudnn.version())"; }
                       ;;
             (*) echo "No binary available"
                   ;;
              esac
          fi          
                    
          # install libtorch
          if [ ${PACKAGE_VER} == 'libtorch' ]; then
            apt-get install unzip -y
            case ${CUDA_VER} in
              ("rocm") { wget https://download.pytorch.org/libtorch/rocm5.1.1/libtorch-cxx11-abi-shared-with-deps-1.12.1%2Brocm5.1.1.zip;
                       unzip libtorch-cxx11-abi-shared-with-deps-1.12.1+rocm5.1.1; }
                       ;;
              ("cpu") { wget https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-shared-with-deps-1.12.1%2Bcpu.zip;
                      unzip libtorch-cxx11-abi-shared-with-deps-1.12.1+cpu; }
                      ;;
              ("10.2") { wget https://download.pytorch.org/libtorch/cu102/libtorch-cxx11-abi-shared-with-deps-1.12.1%2Bcu102.zip;
                       unzip libtorch-cxx11-abi-shared-with-deps-1.12.1+cu102; }
                       ;;
              ("11.3") { wget https://download.pytorch.org/libtorch/cu113/libtorch-cxx11-abi-shared-with-deps-1.12.1%2Bcu113.zip;
                       unzip libtorch-cxx11-abi-shared-with-deps-1.12.1+cu113; }
                       ;;
              ("11.6") { wget https://download.pytorch.org/libtorch/cu116/libtorch-cxx11-abi-shared-with-deps-1.12.1%2Bcu116.zip;
                       unzip libtorch-cxx11-abi-shared-with-deps-1.12.1+cu116; }
                       ;;
              ("11.7") { wget https://download.pytorch.org/libtorch/cu117/libtorch-cxx11-abi-shared-with-deps-1.12.1%2Bcu117.zip;
                       unzip libtorch-cxx11-abi-shared-with-deps-1.12.1+cu117; }
                       ;;
              (*) echo "No binary available"
                  ;;
              esac
          fi
